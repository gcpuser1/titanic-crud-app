# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: 
  vmImage: ubuntu-latest

variables:
  - group: SonarCloud
  - name: Build.BuildId
    value: 0.0.1
jobs:
  - job:
    steps:
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'
    - task: Docker@2
      inputs:
        containerRegistry: 'titanic_acr'
        repository: 'titanicdb'
        command: 'buildAndPush'
        Dockerfile: 'psql.dockerfile'

    - script: |
               docker images
               docker run -e POSTGRES_PASSWORD=admin123 -p 49158:5432 -d titanicacr.azurecr.io/titanicdb:$(Build.BuildId)

    - script: |
                echo "$(SONAR_TOKEN)"
                export SONAR_TOKEN=$(SONAR_TOKEN)
                echo "after : $SONAR_TOKEN"

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'sonar:sonar verify'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
        codeCoverageFailIfEmpty: true
        codeCoverageRestoreOriginalPomXml: true
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: true
        sqMavenPluginVersionChoice: 'latest'

   
    - task: Docker@2
      inputs:
        containerRegistry: 'titanic_acr'
        repository: 'titanicapp'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
    - task: replacetokens@5
      inputs:
        targetFiles: '*.yaml'
        encoding: 'auto'
        tokenPattern: 'azpipelines'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true

    - task: CopyFiles@2
      inputs:
        Contents: '*.yaml'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'kubernetes'
        publishLocation: 'Container'